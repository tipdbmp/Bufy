=begin pod

=TITLE Read/Write native types from/to buf8 buffers.
=NAME Bufy - read/write native types from/to buf8 buffers

=head3 SYNOPSIS

=head4 shorthand aliases to the native types
=begin code
use Bufy :constants;

my u64 $u64 = 0xFFFF_FFFF_FFFF_FFFF; # uint64
my u32 $u32 = 0xFFFF_FFFF; # uint32
my u16 $u16 = 0xFFFF; # uint16
my u8 $u8 = 0xFF; # uint8

my i64 $u64 = 0xFFFF_FFFF_FFFF_FFFF; # int64
my i32 $u32 = 0xFFFF_FFFF; # int32
my i16 $u16 = 0xFFFF; # int16
my i8 $u8 = 0xFF; # int8

my f64 $f64 = 1.0e0; # num64;
my f32 $f32 = 1.0e0; # num32;
=end code

=head3 functions

=begin code
use Bufy :functions; # all functions
use Bufy :write-u64, :read-u64; # only specific functions
=end code

=head5 sub write-type(buf8 $b, Any:D $x)
=begin code
class Foo {
    has u32 $.bar = 0xFFFF_FFFF;
    has f32 $.baz = 1.0e0;
}
my buf8 $buf .= new;
write-type($buf, Foo.new);
say $buf; # Buf[uint8]:0x<ff ff ff ff 3f 80 00 00>
=end code

=head5 sub read-type(buf8 $b, Any:U $ty is copy, u64 $offset is rw --> Any)
=begin code
my buf8 $buf .= new(0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0x00, 0x00);
my u64 $offset = 0;
my Foo $foo = read-type($buf, Foo, $offset);
say $foo; # Foo.new(bar => -1, baz => 1e0)
=end code

=head5 sub write-Str(buf8 $b, Str $s)
=begin code
my buf8 $buf .= new;
write-Str($buf, 'ABCD');
say $buf; # Buf[uint8]:0x<00 00 00 04 41 42 43 44>
=end code

=head5 sub read-Str(buf8 $b, u64 $offset is rw --> Str)
=begin code
my buf8 $buf .= new(0x00, 0x00, 0x00, 0x04, 0x41, 0x42, 0x43, 0x44);
my u64 $offset = 0;
my Str $str = read-Str($buf, $offset);
say $str.perl; # "ABCD"
=end code

=head5 sub write-array(buf8 $b, Any:U $ty, @array)
=head5 sub read-array(buf8 $b, Any:U $ty, u64 $offset is rw)

=head5 sub write-u64(buf8 $b, u64 $x)
=head5 sub write-u32(buf8 $b, u32 $x)
=head5 sub write-u16(buf8 $b, u16 $x)
=head5 sub write-u8(buf8 $b, u8 $x)

=head5 sub write-i64(buf8 $b, i64 $x)
=head5 sub write-i32(buf8 $b, i32 $x)
=head5 sub write-i16(buf8 $b, i16 $x)
=head5 sub write-i8(buf8 $b, i8 $x)

=head5 sub write-f64(buf8 $b, f64 $x)
=head5 sub write-f32(buf8 $b, f32 $x)

=head5 sub read-u64(buf8 $b, u64 $offset is rw --> u64)
=head5 sub read-u32(buf8 $b, u64 $offset is rw --> u32)
=head5 sub read-u16(buf8 $b, u64 $offset is rw --> u16)
=head5 sub read-u8(buf8 $b, u64 $offset is rw --> u8)

=head5 sub read-i64(buf8 $b, u64 $offset is rw --> i64)
=head5 sub read-i32(buf8 $b, u64 $offset is rw --> i32)
=head5 sub read-i16(buf8 $b, u64 $offset is rw --> i16)
=head5 sub read-i8(buf8 $b, u64 $offset is rw --> i8)

=head5 sub read-f64(buf8 $b, u64 $offset is rw --> f64)
=head5 sub read-f32(buf8 $b, u64 $offset is rw --> f32)

=head5 sub f64-as-u64(f64 $x --> u64)
=begin code
my u64 $u64 = f64-as-u64(1.0e0);
say $u64.base(16); # 3FF0000000000000
=end code

=head5 sub u64-as-f64(u64 $x --> f64)
=begin code
say u64-as-f64(0x3FF0000000000000).perl; # 1e0
=end code

=head5 sub f32-as-u32(f32 $x --> u32)
=begin code
my u32 $u32 = f32-as-u32(1.0e0);
say $u32.base(16); # 3F800000
=end code

=head5 sub u32-as-f32(u32 $x --> f32)
=begin code
say u32-as-f32(0x3F800000).perl; # 1e0
=end code

=head3 no-serialize trait
=begin code
class Foo {
    has u32 $.bar = 0xFFFF_FFFF;
    has f32 $.baz is no-serialize = 1.0e0;
}
my buf8 $buf .= new;
write-type($buf, Foo.new);
say $buf; # Buf[uint8]:0x<ff ff ff ff>
=end code

=head3 array attributes
=begin code
class Foo {
    has u8 @.bar = 0xAA, 0xBB, 0xCC, 0xDD;
}
my buf8 $buf .= new;
write-type($buf, Foo.new);
say $buf; # Buf[uint8]:0x<00 00 00 04 aa bb cc dd>
=end code


=head3 serializable attributes
=begin code
use Bufy :constants, :write-type, :Serializable;
class Foo is Serializable {
    has u8 $.a = 1;
}
class Bar {
    has Foo $.foo = Foo.new;
    has u8 $.b = 2;
}
my buf8 $buf .= new;
write-type($buf, Bar.new);
say $buf; # Buf[uint8]:0x<01 02>
=end code

=head3 versioning
=begin code
use Bufy :constants, :functions, :Serializable, :no-serialize;

class FooBase is Serializable {}
class Foo_0x01 is FooBase {
    my $.version = 0x01;

    has Str $.a = 'ABCD';
}
class Foo_0x02 is FooBase {
   my $.version = 0x02;

    has Str $.a = 'ABCD';
    has f32 $.b = 1.0e0;
}
class Foo is Foo_0x01 {}

constant Write-File = True;

if Write-File {
    my buf8 $buf .= new;

    write-type($buf, Foo.new);
    my FooBase $custom = Foo.new(a => 'WXYZ');
    write-type($buf, $custom);

    'my-file.bin'.IO.spurt($buf, :bin);
    return;
}

# read file

my buf8 $buf = 'my-file.bin'.IO.slurp(:bin);

my u64 $offset = 0;
my FooBase $foo1 = read-type($buf, Foo, $offset);
my FooBase $foo2 = read-type($buf, Foo, $offset);

say $foo1;
say $foo2;
=end code

=end pod
